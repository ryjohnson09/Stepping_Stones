[
  {
    "objectID": "docs/Python/pins/pin-dataset-Python.html",
    "href": "docs/Python/pins/pin-dataset-Python.html",
    "title": "Pin Dataset in Python",
    "section": "",
    "text": "Here is where you pin a dataset in Python"
  },
  {
    "objectID": "docs/Python/Python.html",
    "href": "docs/Python/Python.html",
    "title": "Python",
    "section": "",
    "text": "This is all Python related Stepping Stones."
  },
  {
    "objectID": "docs/Python/Dash/dash_deploy_PCT.html",
    "href": "docs/Python/Dash/dash_deploy_PCT.html",
    "title": "Publishing Dash app to Posit Connect",
    "section": "",
    "text": "Note\n\n\n\nDash is a productive Python framework for building web applications.\n\n\nIn the video below, we’ll discuss how to:\n\nAccess VS Code withing Posit Workbench\nCreate a new directory and initialize a virtual environment using venv\nPull in a Dash application from GitHub\nDeploy Dash application to Posit Connect using the rsconnect-python package.\n\nYou can find more instructions on deploying Dash applications on our Posit Connect User Guide."
  },
  {
    "objectID": "docs/Datasets/Datasets.html",
    "href": "docs/Datasets/Datasets.html",
    "title": "Datasets",
    "section": "",
    "text": "Many of the Posit Stepping stones will leverage packages/functions/workflows that require data. Data in the real world can complex, messy, and large. In order to keep the Stepping Stones as simple as possible, we selected data that is small, clean, and easily understood. Below is a list of datasets used on this website with a short description of each."
  },
  {
    "objectID": "docs/Datasets/Datasets.html#covid-data",
    "href": "docs/Datasets/Datasets.html#covid-data",
    "title": "Datasets",
    "section": "Covid Data",
    "text": "Covid Data\nJohns Hopkins University maintains a curated repository of Covid data including new infections and deaths."
  },
  {
    "objectID": "docs/R/pins/pin-dataset-R.html",
    "href": "docs/R/pins/pin-dataset-R.html",
    "title": "Pin Dataset in R",
    "section": "",
    "text": "library(\"pins\")\nAnd now create the pin!"
  },
  {
    "objectID": "docs/R/reticulate/proj-settings.html",
    "href": "docs/R/reticulate/proj-settings.html",
    "title": "Reticulate: R Project Settings",
    "section": "",
    "text": "Reticulate is an open source R package that provides a python interface to your R session. This allows users to leverage the power of R and Python in a single workflow. Before you start using reticulate, it’s important that you first configure your R project to accommodate Python code and packages. reticulate does provide some built in functions to help with this, but for this stepping stone, we’ll do this manually with the help of venv.\nSimilar to how you manage R environment and packages using R Projects and renv, we need to set up a similar environment for Python."
  },
  {
    "objectID": "docs/R/reticulate/proj-settings.html#step-1-create-an-r-project",
    "href": "docs/R/reticulate/proj-settings.html#step-1-create-an-r-project",
    "title": "Reticulate: R Project Settings",
    "section": "Step 1: Create an R Project",
    "text": "Step 1: Create an R Project\nAn R project is your project’s home directory. It’s always a good idea to keep projects isolated from other projects to avoid conflicts. There are multiple ways to create R projects:\n\nFile –> New Project\nClick the Create a New Project icon in the top left of the RStudio IDE.\nSelect New Project from the dropdown menu in the top right corner of the RStudio IDE.\nUse the create_project() function from the usethis package"
  },
  {
    "objectID": "docs/R/reticulate/proj-settings.html#step-2-create-a-new-python-virtual-environment",
    "href": "docs/R/reticulate/proj-settings.html#step-2-create-a-new-python-virtual-environment",
    "title": "Reticulate: R Project Settings",
    "section": "Step 2: Create a new Python virtual environment",
    "text": "Step 2: Create a new Python virtual environment\nA virtual environment will ensure that any python packages you install remain isolated to this R project. To do this, we will use the venv python module:\n\nIn the RStudio terminal, and within the same R project home directory, create a virtual env: python -m venv .venv\nActivate the virtual environment: source .venv/bin/activate\nYou should now see a (.venv) in the terminal prompt letting you know that you are inside the virtual environment."
  },
  {
    "objectID": "docs/R/reticulate/proj-settings.html#step-3-point-reticulate-to-your-python-virtual-environment",
    "href": "docs/R/reticulate/proj-settings.html#step-3-point-reticulate-to-your-python-virtual-environment",
    "title": "Reticulate: R Project Settings",
    "section": "Step 3: Point reticulate to your Python virtual environment",
    "text": "Step 3: Point reticulate to your Python virtual environment\n\nMake sure the RETICULATE_PYTHON variable is set to “.venv/bin/activate” in the project’s .Renviron file.\nRestart R.\nConfirm that reticulate will now use Python from within your virtual environment by running: Sys.getenv(\"RETICULATE_PYTHON\"). The output should read: .venv/bin/python."
  },
  {
    "objectID": "docs/R/reticulate/proj-settings.html#additional-notes",
    "href": "docs/R/reticulate/proj-settings.html#additional-notes",
    "title": "Reticulate: R Project Settings",
    "section": "Additional notes",
    "text": "Additional notes\n\nIf your using Quarto + reticulate, then make sure to set the engine to use knitr in the yaml."
  },
  {
    "objectID": "docs/R/reticulate/proj-settings.html#example-quarto-doc-using-r-python",
    "href": "docs/R/reticulate/proj-settings.html#example-quarto-doc-using-r-python",
    "title": "Reticulate: R Project Settings",
    "section": "Example Quarto Doc using R + Python",
    "text": "Example Quarto Doc using R + Python\n---\ntitle: \"R + Python\"\nauthor: \"Ryan Johnson\"\nformat: html\nengine: knitr\neditor: visual\n---\nlibrary(reticulate)\nBelow is the code for a line plot using Python.\n#| label: python-plot\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nt = np.arange(0.0, 2.0, 0.01)\ns = 1 + np.sin(2 * np.pi * t)\n\nfig, ax = plt.subplots()\nax.plot(t, s)\n\nax.set(xlabel='X', ylabel='Y',\n       title='A Plot using Python')\nax.grid()\n\nplt.show()\nBelow is the code for a line plot in R, using the same data as the python plot.\n#| label: r-plot\n#| message: false\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Read python data into R using py$\nr_data <- tibble(X = py$t, Y = py$s)\n\nggplot(data = r_data, aes(x = X, y = Y)) +\n  geom_line(color = \"#398AD7\", size = 2) +\n  theme_minimal() +\n  labs(title = \"A Plot using R\")"
  },
  {
    "objectID": "docs/R/R.html",
    "href": "docs/R/R.html",
    "title": "R",
    "section": "",
    "text": "This is all R related Stepping Stones."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posit Stepping Stones",
    "section": "",
    "text": "Welcome to Posit Stepping Stones! See the navigation bar to the left to learn."
  }
]